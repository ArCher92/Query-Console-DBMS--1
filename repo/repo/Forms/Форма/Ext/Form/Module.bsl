
//https://github.com/ArCher92

&НаКлиенте
перем ТекущийИдентификаторЗапроса;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если СтрНайти(СтрокаСоединения, "File") > 0 Тогда
		//Сообщить("Обработка не предназначена для файловой версии!");
		//Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	ПутьКБазе = ПутьКИнформационнойБазе(СтрокаСоединения);

	ВосстановитьНастройки();

	ЭтоWindowsКлиент = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64); 
	Элементы.КонструкторСтрокиПодключения.Доступность = ЭтоWindowsКлиент;
	Элементы.ФормаВыполнитьЗапрос.Доступность = НЕ ПустаяСтрока(ТекстЗапроса);
	
	Если ПустаяСтрока(КонтекстВыполнения) Тогда
		КонтекстВыполнения = Элементы.КонтекстВыполнения.СписокВыбора[0].Значение;	
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы
  
&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ЛогОшибки = "";
	Лог = Символы.ПС + "=====================================================" + Символы.ПС + "Старт выполнения запроса";
	ЛогТекущий = Лог + Символы.ПС + Символы.ПС + Символы.Таб + "Дата начала: " + Формат(ТекущаяДата(), "ДЛФ=DT");
	
	Результат = ?(КонтекстВыполнения = "НаКлиенте", ВыполнитьЗапросСУБД(СтрокаПодключения, СокрЛП(ТекстЗапроса), ПреобразовыватьТипы),
		ВыполнитьЗапросСУБДНаСервере(СтрокаПодключения, СокрЛП(ТекстЗапроса), ПреобразовыватьТипы));

	СтрокаЗапрос = ТаблицаЗапросов.Добавить();
   	ЗаполнитьЗначенияСвойств(СтрокаЗапрос, Результат.СтруктураЗапроса);

	ТекущийИдентификаторЗапроса = СтрокаЗапрос.ПолучитьИдентификатор();
	
	ЛогТекущий = ЛогТекущий + Символы.ПС + Символы.Таб + "Дата Окончания: " + Формат(ТекущаяДата(), "ДЛФ=DT");
	Если ЗначениеЗаполнено(Результат.Ошибки) Тогда
		ЛогТекущий = ЛогТекущий + Символы.ПС + Символы.ПС + "Выполнение запроса завершено с ошибками.";
	Иначе
		ЛогТекущий = ЛогТекущий + Символы.ПС + Символы.ПС + "Выполнение запроса успешно завершено.";
	КонецЕсли;	
	Лог = ЛогТекущий + Символы.ПС + "=====================================================";
	
	ЛогОшибки = Результат.Ошибки; 
	
	Элементы.СтраницаОшибки.Заголовок = "Ошибки";
	Элементы.СтраницаОшибки.ЦветТекстаЗаголовка = ?(ЗначениеЗаполнено(Результат.Ошибки), WebЦвета.Красный, WebЦвета.Черный);
	Элементы.СтраницаЛоги.Видимость = Истина;	

	Если Результат.ДокументРезультат <> Неопределено Тогда
		ДокументРезультатЗапроса = Результат.ДокументРезультат;		
	КонецЕсли;
	Элементы.ГруппаРезультат.Видимость = (Результат.ДокументРезультат <> Неопределено);

	Элементы.ДокументРезультатЗапроса.ТекущаяОбласть = ДокументРезультатЗапроса.Область(1, 1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСоединения(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 

	СтруктураПодключения = ?(КонтекстВыполнения = "НаКлиенте", ВыполнитьПодключение(СтрокаПодключения, Истина),
		ВыполнитьПодключениеНаСервере(СтрокаПодключения, Истина));
	
	СообщениеПользователю = ?(ПустаяСтрока(СтруктураПодключения.Ошибки), "Соединение успешно установлено", СтруктураПодключения.Ошибки);
	Сообщить(СообщениеПользователю);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПароль(Команда)
	
	Элементы.Password.РежимПароля = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторСтрокиПодключения(Команда)
	
	#Если ВебКлиент Тогда
		ВызватьИсключение "Конструктор невозможно запустить в веб-клиенте";	
	#КонецЕсли
	
	UniversalDataLink = Новый COMОбъект("ADODB.Connection");
	DataLink = Новый COMОбъект("DataLinks");
	DataLink.PromptEdit(UniversalDataLink);
	String = UniversalDataLink.ConnectionString;
	Если ЗначениеЗаполнено(String) Тогда
		СтрокаПодключения = String;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	

	
КонецПроцедуры

&НаКлиенте
Процедура СправкаПоКомандамSQL(Команда)
	
   ОткрытьФормуСправки("КомандыSQL");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийЗапрос(Команда)
	
	Если ТаблицаЗапросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если ТекущийИдентификаторЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредыдущийИдентификатор = ТекущийИдентификаторЗапроса - 1; 	
	ПредыдущиеДанныеЗапроса = ТаблицаЗапросов.НайтиПоИдентификатору(ПредыдущийИдентификатор);	
	Если ПредыдущиеДанныеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекстЗапроса = ПредыдущиеДанныеЗапроса.ТекстЗапроса Тогда //Ищем отличающийся от текущего текст запроса
		Пока Истина Цикл
			ТекущийИдентификаторЗапроса = ПредыдущийИдентификатор;	
			ПредыдущийИдентификатор = ТекущийИдентификаторЗапроса - 1;
			ПредыдущиеДанныеЗапроса = ТаблицаЗапросов.НайтиПоИдентификатору(ПредыдущийИдентификатор);
			Если ПредыдущиеДанныеЗапроса = Неопределено Тогда
				Возврат;
			ИначеЕсли ПредыдущиеДанныеЗапроса.ТекстЗапроса <> ТекстЗапроса Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	ТекстЗапроса = ПредыдущиеДанныеЗапроса.ТекстЗапроса;
	ТекущийИдентификаторЗапроса = ПредыдущийИдентификатор;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДекорацияИсторияЗапросовНажатие(Элемент)

	Если ТаблицаЗапросов.Количество() = 0 Тогда
		Сообщить("Нет данных по истории запросов");
		Возврат;
	КонецЕсли;
    Элементы.ГруппаИсторияЗапроса.Видимость = НЕ Элементы.ГруппаИсторияЗапроса.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияCSНажатие(Элемент)

	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработкаНажатияГиперссылкиПереходаНаСайт", ЭтаФорма), "https://www.connectionstrings.com"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияGithubНажатие(Элемент)
	
   НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработкаНажатияГиперссылкиПереходаНаСайт", ЭтаФорма), "https://github.com/ArCher92");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияLinkedinНажатие(Элемент)
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработкаНажатияГиперссылкиПереходаНаСайт", ЭтаФорма), "https://www.linkedin.com/in/artur-cerednicenco-31528b1b3");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияSkypeНажатие(Элемент)

	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработкаНажатияГиперссылкиПереходаНаСайт", ЭтаФорма), "https://join.skype.com/invite/jmh2bOg0gVCe");

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияMailНажатие(Элемент)

	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработкаНажатияГиперссылкиПереходаНаСайт", ЭтаФорма), "mailto:artur.cherednichenko92@gmail.com");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСправкаКомандыSQLНажатие(Элемент)
		
    ОткрытьФормуСправки("КомандыSQL");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	
   Элементы.ФормаВыполнитьЗапрос.Доступность = НЕ ПустаяСтрока(ТекстЗапроса);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТаблицаЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
   Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗапросовПередУдалением(Элемент, Отказ)
	
   Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПоказатьВводСтрокиЗавершение", ЭтаФорма), ТекущиеДанные.ТекстЗапроса,"Текст запроса",,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьПодключение(Знач СтрокаПодключения, ТестСоединения = Ложь);
	
	Результат = Новый Структура;	
	Ошибки = "";
	
	Попытка
		Соединение = Новый ComObject("ADODB.Connection");
		Соединение.Open(СтрокаПодключения);
		Если ТестСоединения Тогда
			Соединение.Close();
			Соединение = Неопределено;			
		КонецЕсли;
	Исключение
		Ошибки = СтрШаблон("Не удалось установить соединение с сервером по причине: %1",КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
	Результат.Вставить("Ошибки", Ошибки);
	
	Если НЕ ТестСоединения Тогда
		Результат.Вставить("Соединение", Соединение);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьЗапросСУБД(Знач СтрокаПодключения, Знач ТекстЗапроса, Знач ПреобразовыватьТипы);
	
	ЭтоВыборкаДанных 	= (СтрНайти(ВРег(ТекстЗапроса), "SELECT") > 0);
	МассивОшибок 		= Новый Массив;
	СтруктураЗапроса    = Новый Структура("ТекстЗапроса, ВыполненУспешно, Длительность, ДатаВремяНачала, ВремяНачалаМС, ВремяОкончанияМС", ТекстЗапроса, Ложь, 0, Дата(1,1,1),0,0);
	РезультатВыполнения = Новый Структура("Ошибки, ДокументРезультат, СтруктураЗапроса", "" ,Неопределено, СтруктураЗапроса);
	
	СтруктураПодключения = ВыполнитьПодключение(СтрокаПодключения);
	ADODBСоединение = СтруктураПодключения.Соединение;
	Успешно = ПустаяСтрока(СтруктураПодключения.Ошибки);
	Если НЕ Успешно Тогда
		РезультатВыполнения.Ошибки = СтруктураПодключения.Ошибки;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Попытка
		Команда = Новый ComObject("ADODB.Command");
		Команда.ActiveConnection = ADODBСоединение;        
		Команда.CommandText = ТекстЗапроса;
	Исключение
		РезультатВыполнения.Ошибки = СтрШаблон("Не удалось инициализировать команду выполнения к СУБД по причине: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ADODBСоединение.Close();
		ADODBСоединение = Неопределено;
		Возврат РезультатВыполнения;		
	КонецПопытки;

    Успех = Ложь;
	
	Если ЭтоВыборкаДанных Тогда
		
		СтруктураЗапроса.ДатаВремяНачала = Формат(ТекущаяДата(), "ДЛФ=T");

		Попытка		
			НаборЗаписей = Новый ComObject("ADODB.RecordSet");
			ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах(); //Замер
			НаборЗаписей = Команда.Execute();
			ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах(); //Замер
			Длительность = (ВремяОкончания - ВремяНачала)/1000; //Замер
			ДлительностьВСекундах = Длительность % 60; //Замер
			Успех = Истина;
		Исключение
			РезультатВыполнения.СтруктураЗапроса = СтруктураЗапроса;
			РезультатВыполнения.Ошибки = СтрШаблон("Не удалось выполнить запрос к СУБД по причине: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
			ADODBСоединение.Close();
			ADODBСоединение = Неопределено;
			Возврат РезультатВыполнения;		
		КонецПопытки;
		
		//Обрабатываем результат запроса	
		ИменаКолонок = Новый Массив;
		Для НомерСтолбца = 0 По НаборЗаписей.Fields.Count - 1 Цикл // добавляем имена колонок из таблиц СУБД            
			ИмяСтолбца = НаборЗаписей.Fields.Item(НомерСтолбца).Name;                
			ИменаКолонок.Добавить(ИмяСтолбца);
		КонецЦикла;
		
		ДанныеЗапроса = Новый Массив;
		Пока НЕ НаборЗаписей.EOF Цикл // заполняем нашу таблицу значений данными из запроса SQL               
			ДанныеСтроки = Новый Структура;
			Для НомерСтолбца = 0 По НаборЗаписей.Fields.Count-1 Цикл
				Value 		  	  = НаборЗаписей.Fields(НомерСтолбца).Value;
				TypeField         = НаборЗаписей.Fields(НомерСтолбца).Type; //Тип текущего поля таблицы
				DefinedSizeField  = НаборЗаписей.Fields(НомерСтолбца).DefinedSize;
				NumericScaleField = НаборЗаписей.Fields(НомерСтолбца).NumericScale;
				Значение = ПолучитьЗначениеПоля(Value, ПреобразовыватьТипы); 
				ДанныеСтроки.Вставить(НаборЗаписей.Fields.Item(НомерСтолбца).Name, Значение);	              
			КонецЦикла;
			ДанныеЗапроса.Добавить(ДанныеСтроки);
			НаборЗаписей.MoveNext();        
		КонецЦикла; 
		
		НаборЗаписей.Close();

		ОбработатьРезультатЗапроса(ИменаКолонок, ДанныеЗапроса, РезультатВыполнения);	
		
	Иначе
		
		СтруктураЗапроса.ДатаВремяНачала = Формат(ТекущаяДата(), "ДЛФ=T");
		
		Попытка 
			ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах(); //Замер
			ЗапросСУБД = Команда.Execute();
			ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах(); //Замер
			Длительность = (ВремяОкончания - ВремяНачала)/1000; //Замер
			ДлительностьВСекундах = Длительность % 60; //Замер
			Успех = Истина;
		Исключение
			РезультатВыполнения.Ошибки = СтрШаблон("Не удалось выполнить запрос к СУБД по причине: %1", КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
			РезультатВыполнения.СтруктураЗапроса = СтруктураЗапроса;
			ADODBСоединение.Close();
			ADODBСоединение = Неопределено;			
			Возврат РезультатВыполнения;		
		КонецПопытки;		
		
	КонецЕсли;
	
	Если ТипЗнч(ADODBСоединение) = Тип("COMОбъект") Тогда
		ADODBСоединение.Close();
		ADODBСоединение = Неопределено;			
	КонецЕсли;
	
	Если Успех Тогда
		СтруктураЗапроса.ВыполненУспешно     = Истина;
		СтруктураЗапроса.Длительность 	     = ДлительностьВСекундах;
		СтруктураЗапроса.ВремяНачалаМС       = ВремяНачала;
		СтруктураЗапроса.ВремяОкончанияМС    = ВремяОкончания;
		РезультатВыполнения.СтруктураЗапроса = СтруктураЗапроса;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеПоля(Знач Value, Знач ПреобразовыватьТипы);

	ДвоичныеДанныеВСтроку = Ложь;
	
	Значение = Value;
	Если ТипЗнч(Value) = Тип("COMSafeArray") Тогда
		Если ПреобразовыватьТипы Тогда
			Массив = Value.Выгрузить(); 
			Длина = Массив.Количество();
			Буфер = Новый БуферДвоичныхДанных(Длина);
			Для Индекс = 0 по Длина - 1 Цикл
				Буфер.Установить(Индекс, Массив[Индекс]);    
			КонецЦикла;		
			Поток = Новый ПотокВПамяти(Буфер);
			Если ДвоичныеДанныеВСтроку Тогда
				СтрокаДвоичныеДанные = "";
				КодПредыдущего = 0;
				Поток = Новый ПотокВПамяти(Буфер);
				Пока Истина Цикл
					Поток.Прочитать(Буфер, 0, 1);
					Код = Буфер[0];				
					Если Код = 0 Тогда
						Если КодПредыдущего = 0 Тогда
							Прервать
						КонецЕсли;
						СтрокаДвоичныеДанные = "";
					ИначеЕсли Код >= 32 И Код <= 122 Тогда
						СтрокаДвоичныеДанные = СтрокаДвоичныеДанные + Символ(Код);
					Иначе
						Прервать
					КонецЕсли;
					КодПредыдущего = Код;
				КонецЦикла
			Иначе
				ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
				Значение = ДвоичныеДанные;
			КонецЕсли;			
		Иначе
			Значение = Строка(Значение);	
		КонецЕсли;
	КонецЕсли;
	      
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьПодключениеНаСервере(Знач СтрокаПодключения, ТестСоединения = Ложь)
	
 	Возврат ВыполнитьПодключение(СтрокаПодключения, ТестСоединения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗапросСУБДНаСервере(Знач СтрокаПодключения, Знач ТекстЗапроса, Знач ПреобразовыватьТипы);
	
	Возврат ВыполнитьЗапросСУБД(СтрокаПодключения, ТекстЗапроса, ПреобразовыватьТипы); 
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки(); 
	
	Настройки = Новый Структура;
	Настройки.Вставить("Login", Login);
	Настройки.Вставить("Password", Password);	
	Настройки.Вставить("СтрокаПодключения",   СокрЛП(СтрокаПодключения));
	Настройки.Вставить("КонтекстВыполнения",  КонтекстВыполнения);
	Настройки.Вставить("ТекстЗапроса", 		  СокрЛП(ТекстЗапроса));
	Настройки.Вставить("ПреобразовыватьТипы", ПреобразовыватьТипы);
	
	ХранилищеОбщихНастроек.Сохранить("КонсольЗапросовКСУБД","",Настройки);
	
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьНастройки(); 

	Настройки = ХранилищеОбщихНастроек.Загрузить("КонсольЗапросовКСУБД","");
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		РеквизитыФормы = ЭтотОбъект.ПолучитьРеквизиты();
		Для Каждого КлючЗначениеНастройки ИЗ Настройки Цикл
			Для Каждого РеквизитФормы ИЗ РеквизитыФормы Цикл
				Если РеквизитФормы.Имя = КлючЗначениеНастройки.Ключ Тогда
					ЭтотОбъект[КлючЗначениеНастройки.Ключ] = КлючЗначениеНастройки.Значение;
					Прервать;
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПутьКИнформационнойБазе(СтрокаСоединения);
	
	ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
	Если НЕ (ПозицияПоиска = 1) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
	НачальнаяПозицияКопирования = 6 + 1;
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
	Srvr = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	СтрокаСоединения = Сред(СтрокаСоединения, ПозицияТочкиСЗапятой + 1);
	// позиция имени сервера
	
	ПозицияПоиска = Найти(Врег(СтрокаСоединения), "REF=");
	Если НЕ (ПозицияПоиска = 1) Тогда
		Возврат Неопределено;
	КонецЕсли;
	НачальнаяПозицияКопирования = 6;
	ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
	КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2;
	Ref = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	ПутьКИБ = """" + Srvr + "\" + Ref + """";
	
	Возврат ПутьКИБ; 
	
КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияГиперссылкиПереходаНаСайт(КодВозврата, ДополнительныеПараметры = Неопределено) Экспорт; 

		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСтрокиЗавершение(Строка, ДополнительныеПараметры = Неопределено) Экспорт; 
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьРезультатЗапроса(Знач Колонки, Знач Строки, РезультатВыполнения); 
	
	ИспользоватьПостроитель = Ложь;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки ИЗ Колонки Цикл
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));	
	КонецЦикла;
	
	Для Каждого ДанныеСтроки ИЗ Строки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), ДанныеСтроки);		
	КонецЦикла;
	
	Если ИспользоватьПостроитель Тогда
		
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных  = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Построитель.Вывести(ТабличныйДокумент);
		
	Иначе
		
		ТабличныйДокумент = ПолучитьТабличныйДокументИзТаблицыЗначений(ТаблицаЗначений);
		
	КонецЕсли;
	
	РезультатВыполнения.ДокументРезультат = ТабличныйДокумент;		
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументИзТаблицыЗначений(Знач ТаблицаЗначений);
	
	ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ФиксацияСверху = 1;
	
    // Выводим заголовок таблицы 
	ЛинияЗаголовка = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3);
	ШрифтЗаголовка = Новый Шрифт("Arial",14);
	ЛинияЯчейки    = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
    КолонкаИндекс = 0;
    Пока КолонкаИндекс < ТаблицаЗначений.Колонки.Количество() Цикл
        Колонка = ТаблицаЗначений.Колонки[КолонкаИндекс];
		ОбластьКолонка = ТабДокумент.Область(1, КолонкаИндекс + 1, 1, КолонкаИндекс + 1);
        ОбластьКолонка.Текст = Колонка.Имя;
		ОбластьКолонка.Шрифт = Новый Шрифт(ШрифтЗаголовка, , , Истина);
		ОбластьКолонка.ЦветФона = WebЦвета.СеребристоСерый;
		ОбластьКолонка.Обвести(ЛинияЗаголовка, ЛинияЗаголовка, ЛинияЗаголовка, ЛинияЗаголовка);
		ОбластьКолонка.РастягиватьПоГоризонтали = Истина;
        КолонкаИндекс = КолонкаИндекс + 1;
    КонецЦикла;
    
    // Выводим строки таблицы
    СтрокаИндекс = 0;
    Пока СтрокаИндекс < ТаблицаЗначений.Количество() Цикл
        Таблица_Строка = ТаблицаЗначений[СтрокаИндекс];
        КолонкаИндекс = 0;
        Пока КолонкаИндекс < ТаблицаЗначений.Колонки.Количество() Цикл
            Колонка = ТаблицаЗначений.Колонки[КолонкаИндекс];
			ЗначениеКолонки = Таблица_Строка[Колонка.Имя];
            ОбластьЯчейка = ТабДокумент.Область(СтрокаИндекс + 2, КолонкаИндекс + 1, СтрокаИндекс + 2, КолонкаИндекс + 1);
			ОбластьЯчейка.Текст = Формат(ЗначениеКолонки, "ЧГ=0");
			ОбластьЯчейка.Обвести(ЛинияЯчейки, ЛинияЯчейки, ЛинияЯчейки, ЛинияЯчейки);
			ФорматироватьЯчейку(ОбластьЯчейка, ЗначениеКолонки);
			КолонкаИндекс = КолонкаИндекс + 1;
        КонецЦикла;        
        СтрокаИндекс = СтрокаИндекс + 1;
    КонецЦикла;
    
    Возврат ТабДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ФорматироватьЯчейку(Ячейка, Знач Значение); 
		
	Если Значение = Null Тогда
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Ячейка.ЦветТекста               = WebЦвета.ЦианНейтральный;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда 
		Ячейка.Формат					 = "ЧН=0";
		Ячейка.ЦветТекста 				 = ?(Значение >=0, Новый Цвет(), WebЦвета.РозовоКоричневый);
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Право;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Ячейка.ЦветТекста 				 = Новый Цвет();
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Лево;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Ячейка.ЦветТекста 				 = Новый Цвет();
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
	ИначеЕсли ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Центр;
		Ячейка.ЦветТекста               = WebЦвета.ЦианНейтральный;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	Иначе
		Ячейка.ЦветТекста 				 = Новый Цвет();
		Ячейка.ГоризонтальноеПоложение  = ГоризонтальноеПоложение.Лево;
		Ячейка.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСправки(ИмяМакета); 
	
	ОткрытьФорму("ВнешняяОбработка.КонсольЗапросовКСУБД.Форма.ФормаСправка",
		Новый Структура("ИмяМакета", ИмяМакета),
		ЭтаФорма, УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаСоответствияТипов();
	
	
	
	
КонецФункции

#КонецОбласти

#Область ОпределениеТипов

//Обработчик получения типа значения переданного поля источника данных
//
&НаСервереБезКонтекста
Функция ОпределитьТипЗначенияПоляИсточникаДанных(TypeField, DefinedSizeField, NumericScaleField);
	
	Если НЕ ЗначениеЗаполнено(TypeField) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если TypeField      = 135 Тогда
		ОписаниеТипа    = ТипЗначенияДата(ЧастиДаты.ДатаВремя);
	ИначеЕсли TypeField = 133 Тогда
		ОписаниеТипа    = ТипЗначенияДата(ЧастиДаты.ДатаВремя);
	ИначеЕсли TypeField = 134 Тогда
		ОписаниеТипа    = ТипЗначенияДата(ЧастиДаты.ДатаВремя);
	ИначеЕсли TypeField = 131 Тогда 
		ОписаниеТипа    = ТипЗначенияЧисло(DefinedSizeField, NumericScaleField, ДопустимыйЗнак.Любой);
	ИначеЕсли TypeField = 5 Тогда 
		ОписаниеТипа    = ТипЗначенияЧисло(19, 6, ДопустимыйЗнак.Любой);
	ИначеЕсли TypeField = 3 Тогда 
		ОписаниеТипа    = ТипЗначенияЧисло(10, 0, ДопустимыйЗнак.Любой);
	ИначеЕсли TypeField = 2 Тогда 
		ОписаниеТипа    = ТипЗначенияЧисло(5, 0,  ДопустимыйЗнак.Любой);
	ИначеЕсли TypeField = 200 Тогда
		ОписаниеТипа    = ТипЗначенияСтрока(DefinedSizeField, ДопустимаяДлина.Переменная);
	ИначеЕсли TypeField = 129 Тогда 
		ОписаниеТипа    = ТипЗначенияСтрока(DefinedSizeField, ДопустимаяДлина.Переменная);
	ИначеЕсли TypeField = 128 Тогда 
		ОписаниеТипа    = ТипЗначенияДвоичныеДанные();
	ИначеЕсли TypeField = 204 Тогда
		ОписаниеТипа    = ТипЗначенияДвоичныеДанные();
	ИначеЕсли TypeField = 11 Тогда 
		ОписаниеТипа    = ТипЗначенияБулево();
	Иначе		
		//Если тип не определен, то указываем строковый тип
		ОписаниеТипа    = ТипЗначенияСтрока(DefinedSizeField, ДопустимаяДлина.Переменная);	
	КонецЕсли;
	
	Возврат ОписаниеТипа;
		
КонецФункции 

//Функция возвращает описание типа "Строка"
//
&НаСервереБезКонтекста
Функция ТипЗначенияСтрока(Длина, ДопДлина)
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(Длина, ДопДлина);
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтроки, );
	
КонецФункции

//Функция возвращает описание типа "Число"
//
&НаСервереБезКонтекста
Функция ТипЗначенияЧисло(Разряд, РазрядДЧ, ДопЗнак)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разряд, РазрядДЧ, ДопЗнак);
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла, , );
	
КонецФункции

//Функция возвращает описание типа "Дата"
//
&НаСервереБезКонтекста
Функция ТипЗначенияДата(ЧастиД)
	
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиД);
	Возврат Новый ОписаниеТипов("Дата", , , КвалификаторДаты);
		
КонецФункции 

//Функция возвращает описание типа "Булево"
//
&НаСервереБезКонтекста
Функция ТипЗначенияБулево()
	
	Возврат Новый ОписаниеТипов("Булево", , , );
	
КонецФункции 

//Функция возвращает описание типа "Null"
//
&НаСервереБезКонтекста
Функция ТипЗначенияNull();
	               
	Возврат Новый ОписаниеТипов("Null");	
	
КонецФункции

//Функция возвращает описание типа "Двоичные данные"
//
&НаСервереБезКонтекста
Функция ТипЗначенияДвоичныеДанные();
	            
	Возврат Новый ОписаниеТипов("ДвоичныеДанные");
	
КонецФункции

//Таблица типов данных ADO
//
&НаСервереБезКонтекста
Функция ТаблицаОписанияТипов_ПРИМЕР();
	
	//Constant				Value	Description	                                                                                     Пояснение

	//adArray				0x2000	Combine with another data type to indicate that the other data type is an array	
	//adBigInt				20	    8-byte signed integer																			 64-битное целое
	//adBinary				128		Binary																							 Двоичное
	//adBoolean				11		True or false Boolean																			 Булево
	//adBSTR				8		Null-terminated character string	
	//adChapter				136		4-byte chapter value for a child recordset	
	//adChar				129		String																							 String (строка)
	//adCurrency			6		Currency format																					 Денежный формат
	//adDate				7		Number of days since 12/30/1899																	 Количество дней с момента 12/30/1899
	//adDBDate				133		YYYYMMDD date format																			 Универсальный формат даты ГГГГММДД
	//adDBFileTime			137		Database file time																				 База данных файлов времени
	//adDBTime				134		HHMMSS time format																				 Универсальный формат времени HHMMSS
	//adDBTimeStamp			135		YYYYMMDDHHMMSS date/time format																	 Дататайм как есть YYYYMMDDHHMMSS
	//adDecimal				14		Number with fixed precision and scale															 Специальный тип 1.0хЕ-28 - 1.0хЕ28 одним словом decimal
	//adDouble				5		Double precision floating-point																	 Двойной точности с плавающей точкой
	//adEmpty				0		no value																						 Пусто
	//adError				10		32-bit error code																				 32-битный код ошибки
	//adFileTime			64		Number of 100-nanosecond intervals since 1/1/1601	
	//adGUID				72		Globally Unique identifier	
	//adIDispatch			9		Currently not supported by ADO																	 В настоящее время не поддерживается ADO
	//adInteger				3		4-byte signed integer																			 32-битное целое
	//adIUnknown			13		Currently not supported by ADO																	 В настоящее время не поддерживается ADO
	//adLongVarBinary		205		Long binary value	
	//adLongVarChar			201		Long string value	
	//adLongVarWChar		203		Long Null-terminates string value	
	//adNumeric				131		Number with fixed precision and scale															 Число с фиксированной точности и масштаба
	//adPropVariant			138		PROPVARIANT automation	
	//adSingle				4		Single-precision floating-point value															 32-битное знаковое одинарной точности с плавающей точкой
	//adSmallInt			2		2-byte signed integer																			 16-битное целое со знаком
	//adTinyInt				16		1-byte signed integer																			 8-битное целое со знаком
	//adUnsignedBigInt		21		8-byte unsigned integer																			 64-битное целое беззнаковое
	//adUnsignedInt			19		4-byte unsigned integer																			 32-битное целое беззнаковое
	//adUnsignedSmallInt	18		2-byte unsigned integer																			 16-битное целое беззнаковое
	//adUnsignedTinyInt		17		1-byte unsigned integer																			 8-битное целое беззнаковое
	//adUserDefined			132		User-defined variable																			 Пользовательский тип
	//adVarBinary			204		Binary value																					 Двоичные значения
	//adVarChar				200		String	
	//adVariant				12		Automation variant	
	//adVarNumeric			139		Variable width exact numeric with signed scale	
	//adVarWChar			202		Null-terminated Unicode character string														 Какие-то строки в юникоде
	//adWChar				130		Null-terminated Unicode character string														 Какие-то строки в юникоде
	
КонецФункции

#КонецОбласти

#Область ДанныеСУБД

&НаСервереБезКонтекста
Процедура ПолучитьДанныеСервераСУБД();
	
	//Сервер СУБД
	Попытка
		Соединитель = Новый COMОбъект("V83.COMConnector");
		ИмяКластера = ПолучитьИмяСервера1С();
		ИнформационнаяБаза = ПолучитьИмяБазыСервера1С();
		АдминистраторКластера = "";
		ПарольАдминистратораКластера = "";
		Пользователь = "";
		ПарольПользователя = "";
		
		Поз = Найти(ИмяКластера, ":");
		Если Поз = 0 Тогда
			ИмяАгента = ИмяКластера;
			ИмяАгентаВторое="";
			ИмяКластераБезПорта = ИмяКластера;
			ПортКластера = 1541;
		Иначе
			ИмяКластераБезПорта = Лев(ИмяКластера, Поз-1);
			ПортКластера = Число(Прав(ИмяКластера, СтрДлина(ИмяКластера)-Поз));
			ИмяАгента = ИмяКластераБезПорта;
			ИмяАгентаВторое = ИмяКластераБезПорта+":"+Формат(ПортКластера-1, "ЧГ=0");
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяАгентаВторое) Тогда		
			АгентСервера = Соединитель.ConnectAgent(ИмяАгента); 
		Иначе
			Попытка
				АгентСервера = Соединитель.ConnectAgent(ИмяАгента);
			Исключение
				АгентСервера = Соединитель.ConnectAgent(ИмяАгентаВторое);
			КонецПопытки
		КонецЕсли;
		
		КластерыСерверов = АгентСервера.GetClusters().Выгрузить();
		ИмяСервераИБВРег = ВРег(ИмяКластера);
		Для Каждого Кластер Из КластерыСерверов Цикл
			Если Кластер.ClusterName = "Локальный кластер" И ВРег(ИмяКластераБезПорта) = "LOCALHOST" Тогда
				СерверИнформационнойБазы = Кластер;
				Прервать;	
			КонецЕсли;
			Если ВРег(Кластер.HostName)=ВРег(ИмяКластераБезПорта) И Кластер.MainPort=ПортКластера Тогда
				СерверИнформационнойБазы = Кластер;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СерверИнформационнойБазы <> Неопределено Тогда
			АгентСервера.Authenticate(СерверИнформационнойБазы,АдминистраторКластера,ПарольАдминистратораКластера ); 
			ПроцессыCOM = АгентСервера.GetWorkingProcesses(СерверИнформационнойБазы);
			РабочиеПроцессы = ПроцессыCOM.Выгрузить();
			
			Для Каждого РабочийПроцесс Из РабочиеПроцессы Цикл
				Если РабочийПроцесс.Running = 1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СписокСоединений = РабочиеПроцессы;
			СоединениеСРабочимПроцессом = Соединитель.ConnectWorkingProcess(
			РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ="));
			
			Если Пользователь = "Не определен" Тогда Пользователь="";
				Сообщить("Не указан пользователь!");
			КонецЕсли;
			Попытка
				СоединениеСРабочимПроцессом.AddAuthentication(Пользователь,ПарольПользователя);
			Исключение
				Сообщить("Ошибка авторизации базы!");
				Возврат;
			КонецПопытки;
			ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases().Выгрузить();	
			Для Каждого ИБ Из ИнформационныеБазы Цикл
				// Если информационная база найдена
				Если ВРег(ИБ.Name) = ВРег(ИнформационнаяБаза) Тогда
					СУБД =""+ ИБ.DBMS;
					СерверСУБДИмя = Строка(ИБ.DBServerName);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяСервера1С()
	
	Имя = "";
	С = СтрокаСоединенияИнформационнойБазы(); 
	Если Лев(С,4) = "Srvr" тогда
		С = Сред(С,7);
		Н = Найти(С,"""")-1;
		Имя = ВРег(Сред(С,1,Н));
	КонецЕсли;
	Возврат Имя; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяБазыСервера1С()
	
	Имя = "";
	С = СтрокаСоединенияИнформационнойБазы();
	Л = Найти(С,"Ref=");
	Если Л>0 тогда
		С = Сред(С,Л+5);
		Н = Найти(С,"""")-1;
		Имя = ВРег(Сред(С,1,Н));
	КонецЕсли;
	Возврат Имя;
	
КонецФункции

#КонецОбласти

#Область СтруктураМетаданныхСУБД

Функция ЗапросСтруктурыМетаданных(СУБД);
	
	Если СУБД = "PostgreSQL" Тогда
		Возврат
		"SELECT information_schema.tables.table_name, information_schema.columns.column_name  
		|	FROM information_schema.tables 
		|Left JOIN information_schema.columns ON information_schema.tables.table_name = information_schema.columns.table_name
		|WHERE table_type = 'BASE TABLE' 
		|	AND information_schema.tables.table_schema NOT IN 
		|('pg_catalog', 'information_schema')";
	ИначеЕсли СУБД = "MSSQL" Тогда
		Возврат "";	
	Иначе
		Возврат "";	
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

//https://github.com/ArCher92


